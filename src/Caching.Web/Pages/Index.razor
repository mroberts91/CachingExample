@page "/"
@using System.ComponentModel.DataAnnotations
@inject IZipCodeService ZipCodeService

<EditForm Model=@Model OnValidSubmit=@OnSearch>
	<ValidationSummary />
	<label for=search>Zip Code Lookup</label>
	<InputText @bind-Value=@Model.SearchText class="form-control" placeholder="Zip Code" />
	<br />
	<div class="search-button">
		@if (Loading)
		{
			<button disabled class="btn btn-primary" type="submit">Search</button>
			<img src="/loading.gif"/>
		}
		else
		{
			<button class="btn btn-primary" type="submit">Search</button>
		}
	</div>
</EditForm>
@if(ErrorMessage != null)
{
	<br	/>
	<div class="alert alert-danger">@ErrorMessage</div>
}

@if(LastSearchTime is TimeSpan ts)
{
	<br	/>
	<div class="alert alert-primary">
		Last Search Completed in: <strong>@(ts.TotalMilliseconds.ToString("N2")) ms</strong>
	</div>
}

@if(SearchResult is CityData data)
{
	<br />
	<table class="table table-zip">
	  <tbody>
	    <tr>
	      <th scope="row">Zip Code</th>
	      <td>@data.ZipCode</td>
		  <td></td>
	    </tr>
		<tr>
	      <th scope="row">City</th>
	      <td>@data.City</td>
		  <td></td>
	    </tr>
		<tr>
	      <th scope="row">State</th>
	      <td>@data.State</td>
		  <td></td>
	    </tr>
		<tr>
	      <th scope="row">Abbreviation</th>
	      <td>@data.StateAbbreviation</td>
		  <td></td>
	    </tr>
		<tr>
	      <th scope="row">County</th>
	      <td>@data.County</td>
		  <td></td>
	    </tr>
		<tr>
	      <th scope="row">Longitude</th>
	      <td>@data.Longitude</td>
		  <td></td>
	    </tr>
		<tr>
	      <th scope="row">Latitude</th>
	      <td>@data.Latitude</td>
		  <td></td>
	    </tr>
	  </tbody>
	</table>
}


@code{
	bool Loading { get; set; } = false;
	CityData? SearchResult { get; set; }
	TimeSpan? LastSearchTime { get; set; }
	string? ErrorMessage { get; set; }
	SearchModel Model { get; set; } = new();


	async Task OnSearch(EditContext context)
	{
		Loading = true;
		ErrorMessage = null;

		if(string.IsNullOrWhiteSpace(Model?.SearchText))
		{
			ErrorMessage = "Search is Invalid";
			Loading = false;
			await InvokeAsync(() => StateHasChanged());
			return;
		}

		WrappedActionResult<CityData?> result = await ZipCodeService.GetZipCodeDataAsync(Model.SearchText);

		if (!result.HasResult)
		{
			ErrorMessage = result.ExceptionMessage ?? "Error Occurred";
		}

		Loading = false;
		SearchResult = result.Result;
		LastSearchTime = result.Elapsed;
		await InvokeAsync(() => StateHasChanged());
		
	}


	public class SearchModel
	{
		[Required, MaxLength(5,ErrorMessage = "Search must be 5 digits"), MinLength(5, ErrorMessage = "Search must be 5 digits")]
		public string? SearchText  { get; set; }
	}
}
